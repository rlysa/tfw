from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import logging
from typing import Union

from db.db_request.task_completion import save_text_report, save_file_report
from resource.keyboards.task_description_kb import get_report_options_kb
from .view_task_description import show_task_description

router = Router(name="task_completion_report_router")
logger = logging.getLogger(__name__)


class ReportStates(StatesGroup):
    waiting_text = State()
    waiting_file = State()


@router.callback_query(F.data.startswith("report_options_"))
async def show_report_options(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        task_id = int(callback.data.split("_")[2])
        await callback.message.edit_text(
            text="üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=get_report_options_kb(task_id)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç—á–µ—Ç–æ–≤: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞")


@router.callback_query(F.data.startswith("text_report_"))
async def start_text_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        task_id = int(callback.data.split("_")[2])
        await state.set_state(ReportStates.waiting_text)
        await state.update_data(task_id=task_id)

        await callback.message.edit_text(
            text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"view_task_{task_id}"
                )
            ]])
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞")


@router.message(ReportStates.waiting_text)
async def process_text_report(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    try:
        data = await state.get_data()
        task_id = data['task_id']

        if save_text_report(task_id, message.from_user.id, message.text):
            await message.answer("‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            await state.clear()
            await show_task_description(message, task_id)
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        await state.clear()


@router.callback_query(F.data.startswith("file_report_"))
async def start_file_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞"""
    try:
        task_id = int(callback.data.split("_")[2])
        await state.set_state(ReportStates.waiting_file)
        await state.update_data(task_id=task_id)

        await callback.message.edit_text(
            text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"view_task_{task_id}"
                )
            ]])
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")


@router.message(ReportStates.waiting_file, F.document | F.photo | F.video | F.audio)
async def process_file_report(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        data = await state.get_data()
        task_id = data['task_id']

        file_type = None
        file_id = None

        if message.document:
            file_id = message.document.file_id
            file_type = "document"
        elif message.photo:
            file_id = message.photo[-1].file_id
            file_type = "photo"
        elif message.video:
            file_id = message.video.file_id
            file_type = "video"
        elif message.audio:
            file_id = message.audio.file_id
            file_type = "audio"

        if file_id and file_type and save_file_report(task_id, message.from_user.id, file_id, file_type):
            file_type_name = {
                'document': '–î–æ–∫—É–º–µ–Ω—Ç',
                'photo': '–§–æ—Ç–æ',
                'video': '–í–∏–¥–µ–æ',
                'audio': '–ê—É–¥–∏–æ'
            }.get(file_type, '–§–∞–π–ª')

            await message.answer(f"‚úÖ {file_type_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            await state.clear()
            await show_task_description(message, task_id)
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
            await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
        await state.clear()