from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime
import logging

from db.db_request.task_completion import save_text_report, save_file_report
from ...keyboards.task_description_kb import get_report_options_kb, get_task_description_kb

router = Router(name="task_completion_report_router")
logger = logging.getLogger(__name__)


class ReportStates(StatesGroup):
    waiting_text = State()
    waiting_file = State()


@router.callback_query(F.data.startswith("report_options_"))
async def show_report_options(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞"""
    task_id = int(callback.data.split("_")[2])
    await callback.message.edit_text(
        text="üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_report_options_kb(task_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("text_report_"))
async def start_text_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    task_id = int(callback.data.split("_")[2])
    await state.set_state(ReportStates.waiting_text)
    await state.update_data(task_id=task_id)

    cancel_btn = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"view_task_{task_id}")
    ]])

    await callback.message.edit_text(
        text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞:",
        reply_markup=cancel_btn
    )
    await callback.answer()


@router.message(ReportStates.waiting_text)
async def process_text_report(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    data = await state.get_data()
    task_id = data.get("task_id")

    if save_text_report(task_id, message.from_user.id, message.text):
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞")

    await state.clear()
    await show_task_description(message, task_id)


@router.callback_query(F.data.startswith("file_report_"))
async def start_file_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    task_id = int(callback.data.split("_")[2])
    await state.set_state(ReportStates.waiting_file)
    await state.update_data(task_id=task_id)

    cancel_btn = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"view_task_{task_id}")
    ]])

    await callback.message.edit_text(
        text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ):",
        reply_markup=cancel_btn
    )
    await callback.answer()


@router.message(ReportStates.waiting_file, F.document | F.photo | F.video | F.audio)
async def process_file_report(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    data = await state.get_data()
    task_id = data.get("task_id")

    if message.document:
        file_id = message.document.file_id
        file_type = "document"
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    elif message.video:
        file_id = message.video.file_id
        file_type = "video"
    elif message.audio:
        file_id = message.audio.file_id
        file_type = "audio"

    if save_file_report(task_id, message.from_user.id, file_id, file_type):
        await message.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –æ—Ç—á–µ—Ç!")
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")

    await state.clear()
    await show_task_description(message, task_id)


async def show_task_description(message: Message, task_id: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    from db.db_request.task_description import get_task_description

    task_info = get_task_description(task_id)
    if not task_info:
        await message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    name, description, deadline, status = task_info
    is_done = status == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"

    message_text = (
        f"üìå {name}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}\n\n"
        f"‚è≥ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {deadline}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {status}"
    )

    await message.answer(
        text=message_text,
        reply_markup=get_task_description_kb(task_id, is_done)
    )
    return True