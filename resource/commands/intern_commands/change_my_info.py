from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from db.db_request.change_my_info_db import update_user_info, update_intern_skills
from db.db_request.check_my_info import get_full_user_info
from resource.keyboards.change_my_info_kb import get_edit_select_kb, get_back_to_info_kb
from resource.keyboards.check_my_info_kb import get_my_info_kb
from resource.commands.forms import Form
import logging

router = Router(name="change_my_info_router")
logger = logging.getLogger(__name__)

FIELD_NAMES = {
    "surname": "—Ñ–∞–º–∏–ª–∏—é",
    "name": "–∏–º—è",
    "middlename": "–æ—Ç—á–µ—Å—Ç–≤–æ",
    "skills": "–Ω–∞–≤—ã–∫–∏"
}

FIELD_DB_MAPPING = {
    "middlename": "middle_name",
    "skills": "skills"
}


@router.callback_query(F.data == "change_my_info")
async def start_change_info(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    await callback.message.edit_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_edit_select_kb()
    )
    await state.set_state(Form.changing_info)
    await callback.answer()


@router.callback_query(F.data.startswith("edit_"), Form.changing_info)
async def select_field_to_edit(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field = callback.data.split("_")[1]
    await state.update_data(editing_field=field)

    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {FIELD_NAMES.get(field, field)}:",
        reply_markup=get_back_to_info_kb()
    )
    await callback.answer()


@router.message(Form.changing_info)
async def process_field_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    user_data = await state.get_data()
    field = user_data.get("editing_field")

    if not field:
        await message.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    new_value = message.text.strip()

    if not new_value or len(new_value) > 100:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    username = message.from_user.username
    if not username:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username")
        return

    if field == "skills":
        success = update_intern_skills(username, new_value)
    else:
        db_field = FIELD_DB_MAPPING.get(field, field)
        success = update_user_info(username, {db_field: new_value})

    if success:
        updated_info = get_full_user_info(username)
        if updated_info:
            from .view_check_my_info import format_complete_user_info
            await message.answer(
                "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n" +
                format_complete_user_info(updated_info),
                reply_markup=get_my_info_kb()
            )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_my_info_kb()
        )

    await state.clear()


@router.callback_query(F.data == "back_to_info", Form.changing_info)
async def back_to_info(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await state.clear()
    username = callback.from_user.username
    if username:
        user_data = get_full_user_info(username)
        if user_data:
            from .view_check_my_info import format_complete_user_info
            await callback.message.edit_text(
                text=format_complete_user_info(user_data),
                reply_markup=get_my_info_kb()
            )
            await callback.answer()
            return

    await callback.message.edit_text(
        text="‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_info –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=get_my_info_kb()
    )
    await callback.answer()