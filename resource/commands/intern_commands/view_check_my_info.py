from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from db.db_request.check_my_info import get_user_info
from resource.keyboards.check_my_info_kb import get_my_info_kb
from resource.commands.forms import Form
import logging

router = Router(name="view_check_my_info_router")
logger = logging.getLogger(__name__)

def format_user_info(user_data: dict) -> str:
    role_map = {
        1: "üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        2: "üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        3: "üë®‚Äçüéì –°—Ç–∞–∂—ë—Ä"
    }
    return (
        f"üë§ <b>–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
        f"üìõ <b>–§–ò–û:</b> {user_data['surname']} {user_data['name']} {user_data['middle_name']}\n"
        f"üîπ <b>–õ–æ–≥–∏–Ω:</b> @{user_data['username']}\n"
        f"üëî <b>–†–æ–ª—å:</b> {role_map.get(user_data['role'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    )

async def show_user_info(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = message.from_user.username
        if not username:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}")

        user_data = get_user_info(username)
        if not user_data:
            await message.answer("‚ÑπÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await message.answer(username)
            return

        await message.answer(
            text=format_user_info(user_data),
            reply_markup=get_my_info_kb()
        )
        await state.set_state(Form.view_my_info)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data == "show_my_info")
async def handle_show_my_info(callback: CallbackQuery, state: FSMContext):
    await show_user_info(callback.message, state)
    await callback.answer()

@router.message(Command("my_info"))
async def handle_my_info_command(message: Message, state: FSMContext):
    await show_user_info(message, state)