
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from db.db_request.check_my_info import get_full_user_info
from resource.keyboards.check_my_info_kb import get_my_info_kb
from resource.commands.forms import Form
import logging


router = Router(name="view_check_my_info_router")
logger = logging.getLogger(__name__)


def format_complete_user_info(user_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    role_map = {
        1: "üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        2: "üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        3: "üë®‚Äçüéì –°—Ç–∞–∂—ë—Ä"
    }

    message = [
        "üë§ –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
        "",
        f"üìõ –§–ò–û: {user_data['surname']} {user_data['name']} {user_data['middle_name']}",
        f"üîπ –õ–æ–≥–∏–Ω: @{user_data['username']}",
        f"üëî –†–æ–ª—å: {role_map.get(user_data['role'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
    ]

    if user_data.get('skills'):
        message.append(f"üõ† –ù–∞–≤—ã–∫–∏: {user_data['skills']}")
    if user_data.get('intern_skills'):
        message.append(f"üîß –î–æ–ø. –Ω–∞–≤—ã–∫–∏: {user_data['intern_skills']}")

    return "\n".join(message)


async def show_user_info(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        username = callback.from_user.username
        if not username:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username", show_alert=True)
            return

        user_data = get_full_user_info(username)
        if not user_data:
            await callback.answer("‚ÑπÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await callback.message.edit_text(
            text=format_complete_user_info(user_data),
            reply_markup=get_my_info_kb()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "show_my_info")
async def handle_show_my_info(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'"""
    await show_user_info(callback, state)