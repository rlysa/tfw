from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from db.db_request.check_my_info import get_full_user_info
from resource.keyboards.check_my_info_kb import get_my_info_kb
from resource.commands.forms import Form
import logging

router = Router(name="view_check_my_info_router")
logger = logging.getLogger(__name__)


def format_complete_user_info(user_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –Ω–∞–≤—ã–∫–∞–º–∏"""
    role_map = {
        1: "üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        2: "üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        3: "üë®‚Äçüéì –°—Ç–∞–∂—ë—Ä"
    }

    message = [
        "üë§ –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø",
        "",
        f"üìõ –§–ò–û: {user_data.get('surname', '')} {user_data.get('name', '')} {user_data.get('middle_name', '')}",
        f"üîπ –õ–æ–≥–∏–Ω: @{user_data.get('username', '')}",
        f"üëî –†–æ–ª—å: {role_map.get(user_data.get('role'), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
    ]

    # –ù–∞–≤—ã–∫–∏
    if user_data.get('skills'):
        message.append(f"üõ† –ù–∞–≤—ã–∫–∏: {user_data['skills']}")

    return "\n".join(message)


async def show_user_info(target: Message | CallbackQuery, state: FSMContext):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º user –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        user = target.from_user if isinstance(target, Message) else target.from_user

        if not user.username:
            await (target.answer if isinstance(target, Message) else target.answer)(
                "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram",
                show_alert=isinstance(target, CallbackQuery)
            )
            return

        logger.debug(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username} (ID: {user.id})")

        user_data = get_full_user_info(user.username)
        if not user_data:
            response = "‚ÑπÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
            await (target.answer if isinstance(target, Message) else target.message.edit_text)(response)
            return

        response_text = format_complete_user_info(user_data)

        if isinstance(target, Message):
            await target.answer(response_text, reply_markup=get_my_info_kb())
        else:
            await target.message.edit_text(response_text, reply_markup=get_my_info_kb())

        await state.set_state(Form.view_my_info)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"
        await (target.answer if isinstance(target, Message) else target.answer)(error_msg, show_alert=True)


@router.callback_query(F.data == "show_my_info")
async def handle_show_my_info(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'"""
    await show_user_info(callback, state)
    await callback.answer()


@router.message(Command("my_info"))
async def handle_my_info_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_info"""
    await show_user_info(message, state)