#–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–µ–¥–ª–∞–π–Ω–∞–º)

from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from ..forms import Form
from db.db_request.list_tasks import list_tasks
from ...keyboards.list_of_tasks_kb import list_of_tasks_kb

router = Router(name="view_the_task_list_router")


@router.callback_query(Form.view_the_task_list)
async def view_task_list(callback: CallbackQuery, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è view_the_task_list
    username = callback.from_user.username
    keyboard = list_of_tasks_kb(username)

    if not keyboard:
        await callback.message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
    else:
        await callback.message.answer(
            "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —Å—Ä–æ–∫–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è):",
            reply_markup=keyboard
        )


# –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "show_my_tasks"
@router.callback_query(lambda callback: callback.data == "show_my_tasks")
async def handle_show_my_tasks(callback: CallbackQuery, state: FSMContext):
    username = callback.from_user.username
    keyboard = list_of_tasks_kb(username)

    if not keyboard:
        await callback.message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
    else:
        await callback.message.answer(
            "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —Å—Ä–æ–∫–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è):",
            reply_markup=keyboard
        )

    await state.set_state(Form.view_the_task_list)


@router.message(Form.view_the_task_list)
async def handle_task_list_message(message: Message, state: FSMContext):
    if message.text and message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await state.set_state(Form.main_intern)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")