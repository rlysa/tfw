from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from resource.keyboards.list_of_tasks_kb import list_of_tasks_kb
from ..forms import Form
import logging
from datetime import datetime
from resource.keyboards.action_selection_menu_kb import get_action_selection_menu


router = Router(name="view_the_task_list_router")
logger = logging.getLogger(__name__)


@router.message(Command("tasks"))
async def handle_tasks_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks"""
    try:
        username = message.from_user.username
        logger.info(f"User {username} requested tasks")

        keyboard = list_of_tasks_kb(username)

        if not keyboard or not keyboard.inline_keyboard:
            await message.answer("üéâ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return

        await message.answer(
            f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')})",
            reply_markup=keyboard
        )
        await state.set_state(Form.view_the_task_list)

    except Exception as e:
        logger.error(f"Error in /tasks command: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á")


@router.callback_query(F.data == "refresh_tasks")
async def handle_refresh_tasks(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    try:
        username = callback.from_user.username
        keyboard = list_of_tasks_kb(username)

        if not keyboard or not keyboard.inline_keyboard:
            await callback.message.edit_text(
                f"üéâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')})"
            )
        else:
            await callback.message.edit_text(
                f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')})",
                reply_markup=keyboard
            )

        await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"Error refreshing tasks: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")

@router.callback_query(F.data == "back_to_menu")
async def handle_back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'"""
    try:
        await callback.message.edit_text(
            "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_action_selection_menu()
        )
        await state.set_state(Form.main_menu)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error returning to menu: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")