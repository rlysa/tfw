from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from db.db_request.group_composition import get_group_composition
from resource.keyboards.list_of_tasks_kb import list_of_tasks_kb  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from resource.keyboards.action_selection_menu_kb import get_action_selection_menu
from resource.keyboards.group_composition_kb import get_group_composition_kb
from ..forms import Form
import logging


router = Router(name="action_selection_menu_router")
logger = logging.getLogger(__name__)


@router.message(Command("menu"))
async def show_main_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        await message.answer(
            "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_action_selection_menu()
        )
        await state.set_state(Form.main_menu)
    except Exception as e:
        logger.error(f"Error showing menu: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")


@router.callback_query(F.data == "show_my_tasks")
async def handle_show_my_tasks(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–¥–∞—á–∏'"""
    try:
        username = callback.from_user.username
        keyboard = list_of_tasks_kb(username)

        if not keyboard or not keyboard.inline_keyboard:
            await callback.message.edit_text("üéâ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        else:
            await callback.message.edit_text(
                "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:",
                reply_markup=keyboard
            )
        await state.set_state(Form.view_the_task_list)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing tasks: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á")


@router.callback_query(F.data == "show_my_group")
async def handle_show_my_group(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –≥—Ä—É–ø–ø–∞'"""
    try:
        username = callback.from_user.username
        group_data = get_group_composition(username)

        if not group_data or not group_data['current_user_in_group']:
            await callback.answer("‚ÑπÔ∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ")
            return

        await callback.message.edit_text(
            text=f"üë• –ì—Ä—É–ø–ø–∞: {group_data['group_name']}\n"
                 f"üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {group_data['admin_info']['full_name']}\n"
                 "üìå –°—Ç–∞–∂—ë—Ä—ã:\n" +
                 "\n".join([f"{i}. {i['full_name']}" for i in group_data['interns_info']]),
            reply_markup=get_group_composition_kb()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing group: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø—ã")