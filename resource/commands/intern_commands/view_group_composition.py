from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from db.db_request.group_composition import get_group_composition
from resource.keyboards.group_composition_kb import get_group_composition_kb
from ..forms import Form
import logging

router = Router(name="view_group_composition_router")
logger = logging.getLogger(__name__)


def format_group_message(group_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    message = [
        f"üë• –ì—Ä—É–ø–ø–∞: {group_data['group_name']}",
        f"üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {group_data['admin_info']['full_name']} (@{group_data['admin_info']['username']})\n",
        "üìå –°—Ç–∞–∂—ë—Ä—ã –≤ –≥—Ä—É–ø–ø–µ:"
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å—Ç–∞–∂—ë—Ä–µ
    interns = group_data.get('interns_info', [])
    for i, intern in enumerate(interns, 1):
        message.append(f"{i}. {intern['full_name']} (@{intern['username']})")

    if not interns:
        message.append("–î—Ä—É–≥–∏—Ö —Å—Ç–∞–∂—ë—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ—Ç")

    return "\n".join(message)


async def process_group_request(source: CallbackQuery | Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø—ã"""
    try:
        user = source.from_user
        username = user.username

        if not username:
            error_msg = "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø—ã –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram"
            if isinstance(source, CallbackQuery):
                await source.answer(error_msg, show_alert=True)
            else:
                await source.answer(error_msg)
            return

        logger.debug(f"–ó–∞–ø—Ä–æ—Å –≥—Ä—É–ø–ø—ã –æ—Ç @{username} (ID: {user.id})")

        group_data = get_group_composition(username)

        if not group_data:
            debug_msg = (
                f"‚ÑπÔ∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ\n\n"
                f"Username: @{username}\n"
                f"User ID: {user.id}"
            )
            if isinstance(source, CallbackQuery):
                await source.message.edit_text(debug_msg)
            else:
                await source.answer(debug_msg)
            return

        response = format_group_message(group_data)

        if isinstance(source, CallbackQuery):
            await source.message.edit_text(
                text=response,
                reply_markup=get_group_composition_kb()
            )
        else:
            await source.answer(
                text=response,
                reply_markup=get_group_composition_kb()
            )

        await state.set_state(Form.view_group_composition)

    except Exception as e:
        error_msg = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø—ã\n\n"
            f"Username: @{getattr(user, 'username', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≥—Ä—É–ø–ø—ã: {str(e)}")
        if isinstance(source, CallbackQuery):
            await source.answer(error_msg, show_alert=True)
        else:
            await source.answer(error_msg)
    finally:
        if isinstance(source, CallbackQuery):
            await source.answer()


@router.callback_query(F.data == "show_my_group")
async def show_group_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –≥—Ä—É–ø–ø–∞'"""
    await process_group_request(callback, state)


@router.message(Command("my_group"))
async def group_command_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_group"""
    await process_group_request(message, state)