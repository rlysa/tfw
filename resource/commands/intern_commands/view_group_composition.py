from typing import Dict
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from db.db_request.group_composition import get_group_composition  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è
from resource.keyboards.group_composition_kb import get_group_composition_kb
from ..forms import Form
import logging

router = Router(name="view_group_composition_router")
logger = logging.getLogger(__name__)


def format_group_message(group_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ"""
    message = [
        f"üë• <b>–ì—Ä—É–ø–ø–∞:</b> {group_data['group_name']}",
        f"üë®‚Äçüíº <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {group_data['admin_info']['full_name']} (@{group_data['admin_info']['username']})",
        "",
        "üìå <b>–°—Ç–∞–∂—ë—Ä—ã –≤ –≥—Ä—É–ø–ø–µ:</b>"
    ]

    for i, intern in enumerate(group_data['interns_info'], 1):
        message.append(f"{i}. {intern['full_name']} (@{intern['username']})")

    if not group_data['interns_info']:
        message.append("–î—Ä—É–≥–∏—Ö —Å—Ç–∞–∂—ë—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ—Ç")

    return "\n".join(message)


async def show_user_group(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        username = message.from_user.username
        group_data = get_group_composition(username)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

        if not group_data or not group_data['current_user_in_group']:
            await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ")
            return

        await message.answer(
            text=format_group_message(group_data),
            reply_markup=get_group_composition_kb()
        )
        await state.set_state(Form.view_group_composition)

    except Exception as e:
        logger.error(f"Error showing group: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø—ã")


@router.callback_query(F.data == "show_my_group")
async def handle_show_my_group(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –≥—Ä—É–ø–ø–∞'"""
    await show_user_group(callback.message, state)
    await callback.answer()


@router.message(Command("my_group"))
async def handle_my_group_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_group"""
    await show_user_group(message, state)