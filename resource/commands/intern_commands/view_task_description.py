import aiogram
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from db.db_request.task_description import get_task_description, change_task_status
from ...keyboards.task_description_kb import get_task_description_kb
from ...keyboards.list_of_tasks_kb import list_of_tasks_kb
import logging


router = aiogram.Router(name="view_task_description_router")
logger = logging.getLogger(__name__)


async def show_task_description(message: Message, task_id: int):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        task_id: ID –∑–∞–¥–∞—á–∏
    """
    task_info = get_task_description(task_id)
    if not task_info:
        await message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    name, description, deadline, status = task_info
    is_done = status == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"

    message_text = (
        f"üìå {name}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}\n\n"
        f"‚è≥ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {deadline}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {status}"
    )

    await message.edit_text(
        text=message_text,
        reply_markup=get_task_description_kb(task_id, is_done)
    )
    return True


@router.callback_query(aiogram.F.data.startswith("view_task_"))
async def handle_view_task(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split("_")[2])
    await show_task_description(callback.message, task_id)
    await callback.answer()


@router.callback_query(aiogram.F.data.startswith("change_status_"))
async def handle_change_status(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split("_")[2])

    if change_task_status(task_id):
        await show_task_description(callback.message, task_id)
        await callback.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")


@router.callback_query(aiogram.F.data == "back_to_tasks_list")
async def handle_back_to_list(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á"""
    username = callback.from_user.username
    keyboard = list_of_tasks_kb(username)

    if not keyboard or not keyboard.inline_keyboard:
        await callback.message.edit_text("üéâ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
    else:
        await callback.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:",
            reply_markup=keyboard
        )
    await callback.answer()