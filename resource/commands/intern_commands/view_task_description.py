import aiogram
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import TOKEN
from db.db_request.task_description import get_task_description, change_task_status
from ...keyboards.task_description_kb import get_task_description_kb
from ...keyboards.list_of_tasks_kb import list_of_tasks_kb
import logging
from typing import Union

from db.db_request.task_description import (
    get_task_description,
    change_task_status,
    has_any_reports,
    get_full_report,
    format_report_text
)
from resource.keyboards.task_description_kb import get_task_description_kb
from resource.keyboards.list_of_tasks_kb import list_of_tasks_kb

router = Router(name="view_task_description_router")
logger = logging.getLogger(__name__)


async def show_task_description(message_or_callback: Union[Message, CallbackQuery], task_id: int):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞—á–∏"""
    try:
        if isinstance(message_or_callback, CallbackQuery):
            message = message_or_callback.message
            callback = message_or_callback
        else:
            message = message_or_callback
            callback = None

        task_info = get_task_description(task_id)
        if not task_info:
            await message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            if callback:
                await callback.answer()
            return False

        name, description, deadline, status = task_info
        has_report = has_any_reports(task_id)

        message_text = (
            f"üìå {name}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}\n\n"
            f"‚è≥ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {deadline}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {status}"
        )

        keyboard = get_task_description_kb(task_id, status == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", has_report)

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            await message.edit_text(
                text=message_text,
                reply_markup=keyboard
            )
        except:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                text=message_text,
                reply_markup=keyboard
            )

        if callback:
            await callback.answer()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞—á–∏: {e}")
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        else:
            await message_or_callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        return False


@router.callback_query(F.data.startswith("view_report_"))
async def handle_view_report(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        task_id = int(callback.data.split("_")[2])
        report_data = get_full_report(task_id)

        if not report_data:
            await callback.answer("‚ÑπÔ∏è –û—Ç—á–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å
        await callback.message.answer(
            format_report_text(report_data),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ",
                    callback_data=f"view_task_{task_id}"
                )
            ]])
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏
        for entry in report_data:
            if entry.get('type') == 'file':
                try:
                    file_type = {
                        'document': '–î–æ–∫—É–º–µ–Ω—Ç',
                        'photo': '–§–æ—Ç–æ',
                        'video': '–í–∏–¥–µ–æ',
                        'audio': '–ê—É–¥–∏–æ'
                    }.get(entry.get('file_type'), '–§–∞–π–ª')

                    caption = f"{file_type} –æ—Ç {entry.get('timestamp', 'N/A')}"

                    if entry.get('file_type') == 'document':
                        await callback.message.answer_document(
                            entry.get('file_id'),
                            caption=caption
                        )
                    elif entry.get('file_type') == 'photo':
                        await callback.message.answer_photo(
                            entry.get('file_id'),
                            caption=caption
                        )
                    elif entry.get('file_type') == 'video':
                        await callback.message.answer_video(
                            entry.get('file_id'),
                            caption=caption
                        )
                    elif entry.get('file_type') == 'audio':
                        await callback.message.answer_audio(
                            entry.get('file_id'),
                            caption=caption
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")


@router.callback_query(F.data.startswith("view_task_"))
async def handle_view_task(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split("_")[2])
    await show_task_description(callback, task_id)


@router.callback_query(F.data.startswith("change_status_"))
async def handle_change_status(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    task_id = int(callback.data.split("_")[2])

    change_task_st = change_task_status(task_id)
    if change_task_st[0]:
        await show_task_description(callback.message, task_id)
        bot = Bot(TOKEN)
        await bot.send_message(chat_id=change_task_st[2], text=f'–ó–∞–¥–∞—á–∞ "{change_task_st[1]}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
        await bot.session.close()
        await callback.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")


@router.callback_query(F.data == "back_to_tasks_list")
async def handle_back_to_list(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á"""
    try:
        username = callback.from_user.username
        keyboard = list_of_tasks_kb(username)

        # –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á")